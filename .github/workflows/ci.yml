name: CI

on:
  push:
    branches: [main, feature/**]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libprotobuf-dev protobuf-compiler protobuf-compiler-grpc libgrpc++-dev libgrpc-dev valgrind
      - name: Configure
        run: cmake -S services/order-matching-engine -B services/order-matching-engine/build
      - name: Build
        run: cmake --build services/order-matching-engine/build -- -j
      - name: Run unit tests
        run: ctest --test-dir services/order-matching-engine/build --output-on-failure
      - name: Run benchmarks
        run: |
          ./services/order-matching-engine/build/order_bench --benchmark_repetitions=2 --benchmark_out=services/order-matching-engine/bench/results.json --benchmark_out_format=json
          python3 scripts/parse_bench.py services/order-matching-engine/bench/results.json
      - name: Run memory leak tests with valgrind
        run: |
          set -euo pipefail
          valgrind \
            --tool=memcheck \
            --leak-check=full \
            --show-leak-kinds=all \
            --track-origins=yes \
            --errors-for-leak-kinds=definite \
            --error-exitcode=99 \
            --log-file=valgrind_output.txt \
            ./services/order-matching-engine/build/OrderBook_test || {
              echo "Valgrind reported memory errors or leaks:"
              cat valgrind_output.txt
              exit 1
            }
          if grep -q "All heap blocks were freed -- no leaks are possible" valgrind_output.txt || \
             grep -q "in use at exit: 0 bytes" valgrind_output.txt; then
            echo "No memory leaks detected"
          else
            echo "Unable to confirm leak-free run from valgrind log:"
            tail -n 50 valgrind_output.txt
            exit 1
          fi
